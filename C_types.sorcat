import std;
/*
 * This file is licensed under the GPL-3 License (or AGPL-3 if applicable)
 * Copyright (C) 2025  MikaSukie (old user), MikaLorielle (alt user), EmikaMai (current user), JaydenFreeman (legal name)

 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.

 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.

 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */
// same as C_string.sorcat but since renamed since I added more types than strings.
// ─── “builder” functions that just return/consume a string ────────────
pub extern fn sb_create()                   <string>;
pub extern fn sb_append_str(string b, string s)   <string>;
pub extern fn sb_append_int(string b, int x)      <string>;
pub extern fn sb_append_float(string b, float f)  <string>;
pub extern fn sb_append_bool(string b, bool bb)   <string>;
pub extern fn sb_finish(string b)            <string>;
// ─── “builder” functions that just return/consume a string ────────────

// ─── to_string functions ───────────────────────────────────────────────
pub extern fn itostr(int i)    <string>;
pub extern fn i8tostr(int8 i)    <string>;
pub extern fn i16tostr(int16 i)    <string>;
pub extern fn i32tostr(int32 i)    <string>;
pub extern fn i64tostr(int64 i)    <string>;
pub extern fn ftostr(float f)<string>;
pub extern fn btostr(bool b)  <string>;
pub extern fn tostr(string s)<string>;
// ─── to_string functions ───────────────────────────────────────────────
pub fn safestring(string s) <string> {
    return sb_create() + s;
}
pub extern fn tofloat(int x) <float>;
pub extern fn toint(float x) <int>;
pub extern fn toint_round(float x) <int>;
pub extern fn rmtrz(float x) <string>;
pub extern fn contains(string var, string detection_char) <bool>;
pub extern fn countcontain(string x, string detection_char) <int>;
pub fn empty() <string> { return tostr(""); }

pub fn <T> tostring(T candidate) <string> {
    if (streq(typeof(candidate), "int")) {
        if(streq(get_os_max_bits(), "64")) {
            return i64tostr(candidate);
        } else if (streq(get_os_max_bits(), "32")) {
            return i32tostr(candidate);
        } else {
            return itostr(candidate);
        }
    }
    if (streq(typeof(candidate), "float")) {
        return ftostr(candidate);
    }
    if (streq(typeof(candidate), "bool")) {
        return btostr(candidate);
    }
    if (streq(typeof(candidate), "string")) {
        return tostr(candidate);
    }
    return "ERROR";
}

// ─── String Builder example ────────────────────────────────────────────────
    /*
    string builder = sb_create();
    builder = sb_append_str(builder, tostr("Hello, "));
    builder = sb_append_str(builder, tostr("Orcat!  Number="));
    builder = sb_append_int(builder, 42);
    builder = sb_append_str(builder, tostr(", Pi="));
    builder = sb_append_float(builder, 3.14159);
    builder = sb_append_str(builder, tostr(", flag="));
    builder = sb_append_bool(builder, false);

    // Now finish and print (we add a newline)
    string result = sb_finish(builder);
    print(result);
    print("\n");
// ─── String Builder example ────────────────────────────────────────────────
*/
